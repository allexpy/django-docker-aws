###########
# BUILDER #
###########


# pull official python image from docker-hub
FROM python:3.9.0-alpine as builder


# set environment variables
ENV PROJECT_ROOT /app
# Prevents Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1
# Prevents Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED 1


# set work directory
WORKDIR $PROJECT_ROOT


# install dependencies
RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install flake8


# for psycopg2
RUN apk update
RUN apk add postgresql-dev gcc python3-dev musl-dev

# install requirements in /app/wheels folder
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt


# copy project
COPY . .

# run flake
RUN flake8 --ignore=E501,F401 .


#########
# FINAL #
#########


# pull official python image from docker-hub
FROM python:3.9.0-alpine


# create directory for the app user
RUN mkdir -p /home/app


# create the app user
RUN addgroup -S app && adduser -S app -G app


# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/static
RUN mkdir $APP_HOME/media
WORKDIR $APP_HOME


# install dependencies by copying the wheels folder and requirements from the builder image
RUN apk update
RUN apk add libpq
COPY --from=builder /app/wheels /wheels
COPY --from=builder /app/requirements.txt .
RUN pip install --no-cache /wheels/*


# copy entrypoint-prod.sh
COPY ./entrypoint.prod.sh $APP_HOME


# copy project
COPY . $APP_HOME


# chown all the files to the app user
RUN chown -R app:app $APP_HOME


# change to the app user
USER app


WORKDIR $APP_HOME/application


# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]
